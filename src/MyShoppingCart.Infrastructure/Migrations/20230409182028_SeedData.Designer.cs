// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShoppingCart.Infrastructure;

#nullable disable

namespace MyShoppingCart.Infrastructure.Migrations
{
    [DbContext(typeof(MyShoppingCartContext))]
    [Migration("20230409182028_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("786de95e-2d4c-4524-ac64-6ddf11ad9ec5"),
                            City = "Bedrock",
                            PostalCode = "12345",
                            State = "MO",
                            Street = "123 Test St"
                        },
                        new
                        {
                            Id = new Guid("6b760260-799c-4af1-a173-0bf83a2a74d5"),
                            City = "Bedrock",
                            PostalCode = "12345",
                            State = "MO",
                            Street = "123 Test St"
                        },
                        new
                        {
                            Id = new Guid("b592fa04-541a-4bf2-967c-c07468af2014"),
                            City = "Space City",
                            PostalCode = "12345",
                            State = "MO",
                            Street = "123 Test St"
                        },
                        new
                        {
                            Id = new Guid("ccb9f54b-f5a0-4d42-927d-c65294e0f629"),
                            City = "Space City",
                            PostalCode = "12345",
                            State = "MO",
                            Street = "123 Test St"
                        });
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("BillingAddressId")
                        .IsUnique()
                        .HasFilter("[BillingAddressId] IS NOT NULL");

                    b.HasIndex("ShippingAddressId")
                        .IsUnique()
                        .HasFilter("[ShippingAddressId] IS NOT NULL");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a5eb696-7c8f-47d4-974b-c1da72cec2c5"),
                            BillingAddressId = new Guid("786de95e-2d4c-4524-ac64-6ddf11ad9ec5"),
                            Email = "fred.flintstone@test.com",
                            FirstName = "Fred",
                            LastName = "Flintstone",
                            ShippingAddressId = new Guid("6b760260-799c-4af1-a173-0bf83a2a74d5")
                        },
                        new
                        {
                            Id = new Guid("79f42c77-83e5-403b-9ec1-6a3ff285c5ac"),
                            BillingAddressId = new Guid("b592fa04-541a-4bf2-967c-c07468af2014"),
                            Email = "george.jetson@test.com",
                            FirstName = "George",
                            LastName = "Jetson",
                            ShippingAddressId = new Guid("ccb9f54b-f5a0-4d42-927d-c65294e0f629")
                        });
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.LineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("LineItem", (string)null);
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bc8ae1b-031a-4f3a-815c-2111288ff58c"),
                            Description = "These are some dope Nike Tennis Shoes!",
                            Name = "Nike Tennis Shoes",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = new Guid("9955f4d7-3e40-4111-a76d-23406f93334b"),
                            Description = "This is some tasty gum, but the flavor doesn't last!",
                            Name = "Fruit Stripe Gum",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("ad7d0cf7-ce00-477d-ae2a-5691f65eba0e"),
                            Description = "Cheerios are a healthy part of your breakfast!",
                            Name = "Cheerios",
                            Price = 6.00m
                        },
                        new
                        {
                            Id = new Guid("e226d6b2-324f-4508-b5e5-0db77b345c69"),
                            Description = "Crisp and clean with no caffeine!",
                            Name = "7Up",
                            Price = 1.50m
                        },
                        new
                        {
                            Id = new Guid("e3b2bcce-a8f4-4f7e-9c9e-6ac93e03554a"),
                            Description = "The 90s are calling and they want you back!",
                            Name = "A Plaid Flannel Shirt",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = new Guid("1caa7fb0-8c2e-4304-a1ec-747a89623131"),
                            Description = "The 80s are calling and they want you back!",
                            Name = "Garbage Pale Kids Stickers",
                            Price = 4.00m
                        },
                        new
                        {
                            Id = new Guid("a9c15177-e1a4-4dc8-bcb0-5d78128fdeae"),
                            Description = "Raaawwwrrrr!",
                            Name = "Pink Stuffed Dinosaur",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = new Guid("24ef70c3-0fc1-48d7-994f-380d4c533419"),
                            Description = "Dark and mysterious!  Good for 2 kids who want to impersonate an adult.",
                            Name = "Black Trenchcoat",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = new Guid("2df1a80e-651a-417a-9028-b81d30a9a26e"),
                            Description = "The game that destroys friendships and families!",
                            Name = "Monopoly",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = new Guid("0553ca62-284d-4379-afc5-c2d4903f7a4c"),
                            Description = "Heavy duty!  Fits most dogs and some people.",
                            Name = "A Dog Collar",
                            Price = 100.00m
                        });
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.SecurityClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Claim", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca17ad94-290e-48ec-89fd-b61f0683535f"),
                            CustomerId = new Guid("4a5eb696-7c8f-47d4-974b-c1da72cec2c5"),
                            Type = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            Value = "4A5EB696-7C8F-47D4-974B-C1DA72CEC2C5"
                        },
                        new
                        {
                            Id = new Guid("62c79539-b9cb-490a-816b-5c2c2c3df77a"),
                            CustomerId = new Guid("4a5eb696-7c8f-47d4-974b-c1da72cec2c5"),
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            Value = "Customer"
                        },
                        new
                        {
                            Id = new Guid("3809c003-f0b0-4edf-9e1e-c7e2f6746681"),
                            CustomerId = new Guid("79f42c77-83e5-403b-9ec1-6a3ff285c5ac"),
                            Type = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            Value = "79F42C77-83E5-403B-9EC1-6A3FF285C5AC"
                        },
                        new
                        {
                            Id = new Guid("5d4e57ca-fffb-431f-947e-0e023ff044c3"),
                            CustomerId = new Guid("79f42c77-83e5-403b-9ec1-6a3ff285c5ac"),
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            Value = "Admin"
                        });
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MyShoppingCart.Domain.Entities.Address", "BillingAddress")
                        .WithOne()
                        .HasForeignKey("MyShoppingCart.Domain.Entities.Customer", "BillingAddressId");

                    b.HasOne("MyShoppingCart.Domain.Entities.Address", "ShippingAddress")
                        .WithOne()
                        .HasForeignKey("MyShoppingCart.Domain.Entities.Customer", "ShippingAddressId");

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.LineItem", b =>
                {
                    b.HasOne("MyShoppingCart.Domain.Entities.Order", null)
                        .WithMany("LineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShoppingCart.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Order", b =>
                {
                    b.HasOne("MyShoppingCart.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyShoppingCart.Domain.Entities.Order", b =>
                {
                    b.Navigation("LineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
